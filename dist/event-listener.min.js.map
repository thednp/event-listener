{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { EventsRegistry } from './types';\n\nconst EventRegistry: EventsRegistry = {};\n\nexport { EventRegistry };\n\n/**\n * The global event listener. This function must be a Function.\n *\n */\nexport function globalListener(e: Event): void {\n  const that = this;\n  const { type } = e;\n\n  [...EventRegistry[type]].forEach((elementsMap) => {\n    const [element, listenersMap] = elementsMap;\n    /* istanbul ignore else */\n    if (element === that) {\n      [...listenersMap].forEach((listenerMap) => {\n        const [listener, options] = listenerMap;\n        listener.apply(element, [e]);\n\n        if (options && options.once) {\n          removeListener(element, type, listener, options);\n        }\n      });\n    }\n  });\n}\n\n/**\n * Register a new listener with its options and attach the `globalListener`\n * to the target if this is the first listener.\n */\nexport const addListener = (\n  element: EventTarget,\n  eventType: string,\n  listener: EventListener,\n  options?: AddEventListenerOptions\n): void => {\n  // get element listeners first\n  if (!EventRegistry[eventType]) {\n    EventRegistry[eventType] = new Map();\n  }\n  const oneEventMap = EventRegistry[eventType];\n\n  if (!oneEventMap.has(element)) {\n    oneEventMap.set(element, new Map());\n  }\n  const oneElementMap = oneEventMap.get(element);\n\n  // get listeners size\n  if (typeof oneElementMap === 'undefined') return;\n\n  const { size } = oneElementMap;\n\n  // register listener with its options\n  oneElementMap.set(listener, options);\n\n  // add listener last\n  if (!size) {\n    element.addEventListener(eventType, globalListener, options);\n  }\n};\n\n/**\n * Remove a listener from registry and detach the `globalListener`\n * if no listeners are found in the registry.\n *\n */\nexport const removeListener = (\n  element: EventTarget,\n  eventType: string,\n  listener: EventListener,\n  options?: AddEventListenerOptions\n): void => {\n  // get listener first\n  const oneEventMap = EventRegistry[eventType];\n  const oneElementMap = oneEventMap && oneEventMap.get(element);\n  const savedOptions = oneElementMap && oneElementMap.get(listener);\n\n  // also recover initial options\n  const eventOptions = savedOptions !== undefined ? savedOptions : options;\n\n  // unsubscribe second, remove from registry\n  if (oneElementMap && oneElementMap.has(listener)) oneElementMap.delete(listener);\n  if (oneEventMap && (!oneElementMap || !oneElementMap.size)) oneEventMap.delete(element);\n  if (!oneEventMap || !oneEventMap.size) delete EventRegistry[eventType];\n\n  // remove listener last\n  /* istanbul ignore else */\n  if (!oneElementMap || !oneElementMap.size) {\n    element.removeEventListener(eventType, globalListener, eventOptions);\n  }\n};\n\n/**\n * Advanced event listener based on subscribe / publish pattern.\n * @see https://www.patterns.dev/posts/classic-design-patterns/#observerpatternjavascript\n * @see https://gist.github.com/shystruk/d16c0ee7ac7d194da9644e5d740c8338#file-subpub-js\n * @see https://hackernoon.com/do-you-still-register-window-event-listeners-in-each-component-react-in-example-31a4b1f6f1c8\n */\nexport default {\n  on: addListener,\n  off: removeListener,\n  globalListener,\n  registry: EventRegistry,\n};\n\n// export default Listener;\n"],
  "mappings": ";AAEA,IAAMA,EAAgC,CAAC,EAQhC,SAASC,EAAeC,EAAgB,CAC7C,IAAMC,EAAO,KACP,CAAE,KAAAC,CAAK,EAAIF,EAEjB,CAAC,GAAGG,EAAcD,EAAK,EAAE,QAASE,GAAgB,CAChD,GAAM,CAACC,EAASC,CAAY,EAAIF,EAE5BC,IAAYJ,GACd,CAAC,GAAGK,CAAY,EAAE,QAASC,GAAgB,CACzC,GAAM,CAACC,EAAUC,CAAO,EAAIF,EAC5BC,EAAS,MAAMH,EAAS,CAACL,CAAC,CAAC,EAEvBS,GAAWA,EAAQ,MACrBC,EAAeL,EAASH,EAAMM,EAAUC,CAAO,CAEnD,CAAC,CAEL,CAAC,CACH,CAMO,IAAME,EAAc,CACzBN,EACAO,EACAJ,EACAC,IACS,CAEJN,EAAcS,KACjBT,EAAcS,GAAa,IAAI,KAEjC,IAAMC,EAAcV,EAAcS,GAE7BC,EAAY,IAAIR,CAAO,GAC1BQ,EAAY,IAAIR,EAAS,IAAI,GAAK,EAEpC,IAAMS,EAAgBD,EAAY,IAAIR,CAAO,EAG7C,GAAI,OAAOS,EAAkB,IAAa,OAE1C,GAAM,CAAE,KAAAC,CAAK,EAAID,EAGjBA,EAAc,IAAIN,EAAUC,CAAO,EAG9BM,GACHV,EAAQ,iBAAiBO,EAAWb,EAAgBU,CAAO,CAE/D,EAOaC,EAAiB,CAC5BL,EACAO,EACAJ,EACAC,IACS,CAET,IAAMI,EAAcV,EAAcS,GAC5BE,EAAgBD,GAAeA,EAAY,IAAIR,CAAO,EACtDW,EAAeF,GAAiBA,EAAc,IAAIN,CAAQ,EAG1DS,EAAeD,IAAiB,OAAYA,EAAeP,EAG7DK,GAAiBA,EAAc,IAAIN,CAAQ,GAAGM,EAAc,OAAON,CAAQ,EAC3EK,IAAgB,CAACC,GAAiB,CAACA,EAAc,OAAOD,EAAY,OAAOR,CAAO,GAClF,CAACQ,GAAe,CAACA,EAAY,OAAM,OAAOV,EAAcS,IAIxD,CAACE,GAAiB,CAACA,EAAc,OACnCT,EAAQ,oBAAoBO,EAAWb,EAAgBkB,CAAY,CAEvE,EAQOC,EAAQ,CACb,GAAIP,EACJ,IAAKD,EACL,eAAAX,EACA,SAAUI,CACZ",
  "names": ["EventRegistry", "globalListener", "e", "that", "type", "EventRegistry", "elementsMap", "element", "listenersMap", "listenerMap", "listener", "options", "removeListener", "addListener", "eventType", "oneEventMap", "oneElementMap", "size", "savedOptions", "eventOptions", "src_default"]
}
